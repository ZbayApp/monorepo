--- node_modules/@orbitdb/core/src/sync.js	2025-01-21 16:03:44
+++ node_modules/@orbitdb/core/src/sync.js	 2025-01-21 15:57:57
@@ -3,8 +3,9 @@
 import { EventEmitter } from 'events'
 import { TimeoutController } from 'timeout-abort-controller'
 import pathJoin from './utils/path-join.js'
+import { abortableAsyncIterable } from './utils/abortable-iter.js'
 
-const DefaultTimeout = 30000 // 30 seconds
+const DefaultTimeout = 30_000 // 30 seconds
 
 /**
  * @module Sync
@@ -143,33 +144,39 @@
     events.emit('join', peerId, heads)
   }
 
-  const sendHeads = (source) => {
-    return (async function * () {
+  const sendHeads = (abortController) => (source) => {
+    return abortableAsyncIterable(async function * () {
       const heads = await log.heads()
       for await (const { bytes } of heads) {
         yield bytes
       }
-    })()
+    }(), abortController.signal)
   }
 
-  const receiveHeads = (peerId) => async (source) => {
-    for await (const value of source) {
-      const headBytes = value.subarray()
-      if (headBytes && onSynced) {
-        await onSynced(headBytes)
+  const receiveHeads = (peerId, abortController) => async (source) => {
+    return abortableAsyncIterable(async function * () {
+      for await (const value of source) {
+        const headBytes = value.subarray()
+        if (headBytes && onSynced) {
+          await onSynced(headBytes)
+        }
       }
-    }
-    if (started) {
-      await onPeerJoined(peerId)
-    }
+      if (started) {
+        await onPeerJoined(peerId)
+      }
+    }(), abortController.signal)
   }
 
   const handleReceiveHeads = async ({ connection, stream }) => {
     const peerId = String(connection.remotePeer)
+    const abortController = new AbortController()
     try {
       peers.add(peerId)
-      await pipe(stream, receiveHeads(peerId), sendHeads, stream)
+      await pipe(stream, receiveHeads(peerId, abortController), sendHeads(abortController), stream)
     } catch (e) {
+      if (!abortController.signal.aborted) {
+        abortController.abort(e)
+      }
       peers.delete(peerId)
       events.emit('error', e)
     }
@@ -188,19 +195,23 @@
           return
         }
         const timeoutController = new TimeoutController(timeout)
+        const abortController = new AbortController()
         const { signal } = timeoutController
         try {
+          console.log(`OrbitDB: Dialing ${headsSyncAddress} for peer ${peerId} on subscribe`)
           peers.add(peerId)
           const stream = await libp2p.dialProtocol(remotePeer, headsSyncAddress, { signal })
-          await pipe(sendHeads, stream, receiveHeads(peerId))
+          console.log(`OrbitDB: Sending/receiving heads with peer ID ${peerId}`)
+          await pipe(sendHeads(abortController), stream, receiveHeads(peerId, abortController))
         } catch (e) {
-          console.error(e)
+          console.error(`OrbitDB: Error while dialing protocol ${headsSyncAddress} and syncing with peer ${peerId}`, e)
           peers.delete(peerId)
-          if (e.code === 'ERR_UNSUPPORTED_PROTOCOL') {
-            // Skip peer, they don't have this database currently
+          if (timeoutController.signal.aborted) {
+            console.error(`OrbitDB: Couldn't sync due to timeout of ${DefaultTimeout}ms`)
           } else {
-            events.emit('error', e)
+            abortController.abort(e)
           }
+          events.emit('error', e)
         } finally {
           if (timeoutController) {
             timeoutController.clear()
